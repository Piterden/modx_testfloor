<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      'ee2e881e7ed3faa3efbdb954be7e2e34' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"migxcal_categoryTpl","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":" <li class=\\"migxcal_category\\" data-id=\\"[[+id]]\\" style=\\"color:[[+textColor:default=`#FFFFFF`]];background-color:[[+backgroundColor:default=`#3A87AD`]];\\">[[+name]]<\\/li>","locked":0,"properties":null,"static":0,"static_file":"","content":" <li class=\\"migxcal_category\\" data-id=\\"[[+id]]\\" style=\\"color:[[+textColor:default=`#FFFFFF`]];background-color:[[+backgroundColor:default=`#3A87AD`]];\\">[[+name]]<\\/li>"}',
        'guid' => '89f3b1e22ff6a84bfb22603912244004',
        'native_key' => 1,
        'signature' => '1e161076ffff45b40004de3f75950246',
      ),
      '2911aba049ea2b4895da7c16cb438571' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"migxcal_controller","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"var migxcalController = null;\\nvar migxcal_dragstart_day = null;\\n\\njQuery(document).ready(function() {\\n   migxcalController = $(\'#migxcalCtrl\').scope();\\n   \\n    $(\'.migxcal_category\').draggable({\\n        zIndex: 999,\\n        revert: true,      \\/\\/ immediately snap back to original position\\n        revertDuration: 0  \\/\\/\\n    });   \\n\\n});\\n\\nfunction migxcalCtrl($scope, $http, Config, UiDialog) {\\n    $scope.config = Config;\\n    $scope.eventResize = function(event,revertFunc){\\n        \\/*\\n        if (!confirm(\\"is this okay?\\")) {\\n            revertFunc();\\n            return;\\n        } \\n        *\\/\\n        $scope.revertFunc = revertFunc;\\n        event.allDay = event.allDay ? \'1\' : \'0\';       \\n        $scope.changeEventDates(event,\'update\');\\n    }\\n    $scope.eventDrop = function(event,revertFunc,jsEvent, ui, view){\\n        \\n        var day = event.start.dayOfYear();\\n        var week = event.start.isoWeek();\\n        \\/*                \\n        if (event.Event_repeating == \'1\' && migxcal_dragstart_day != day && !confirm(\\"[[%migxcal.warn_move_repeat_2other_day]]\\")) {\\n            \\/\\/move to other day\\n            revertFunc();\\n            return;\\n        }\\n        *\\/\\n        if (event.Event_repeating == \'1\' && migxcal_dragstart_week != week ) {\\n            \\/\\/move to other week\\n            alert(\\"[[%migxcal.warn_move_repeat_2other_week]]\\");\\n            revertFunc();\\n            return;\\n        }          \\n        \\n        $scope.revertFunc = revertFunc;       \\n        event.allDay = event.allDay ? \'1\' : \'0\'; \\n        $scope.changeEventDates(event,\'update\');\\n    }\\n    \\n    $scope.eventEdit = function(data){\\n        \\n        var event_id = data.id || 0; \\n        $scope.revertFunc = function(){};        \\n        $scope.editEvent(event_id);        \\n    } \\n    \\n    $scope.eventPublish = function(data){\\n        \\n        var event_id = data.id || 0;        \\n        var cfg = Config;\\n        cfg.method = \'POST\';\\n        var dialogOptions = {};\\n        var params = {};\\n\\n        params.configs = \'migxcalendar_dragdropdate\';\\n        params.action = \'mgr\\/migxdb\\/process\';\\n        params.processaction = \'publishdate\';\\n        params.object_id = event_id;\\n        \\/\\/params.original_request_uri = request_uri;\\n        params.data = data;        \\n        \\n        var ajaxConfig = UiDialog.preparePostParams(cfg, params);\\n        ajaxConfig.data = {\\n            \\/\\/data: data\\n        };\\n\\n        $http(ajaxConfig).success(function(response, status, header, config) {\\n           \\n            if (response){\\n            var success = response.success || false;\\n            var message = response.message || \'\';\\n            \\n            if (success) {\\n\\n            } else {\\n                alert(message);\\n            }                \\n            }\\n            $scope.refresh();\\n\\n        }).error(function(data, status, header, config) {\\n            \\/\\/UiDialog.error(data, status, header, config);\\n        });        \\n               \\n    }        \\n    \\n    $scope.eventDropNew = function(event,el){\\n        \\n        \\/*\\n        if (!confirm(\\"is this okay?\\")) {\\n            revertFunc();\\n            return;\\n        } \\n        *\\/\\n        if (el.scope){\\n            var datecontainer = el.scope().date_container;\\n            if (datecontainer && datecontainer.repeating == \'1\'){\\n                alert(\\"[[%migxcal.warn_dragnew_repeatingdate]]\\");\\n                return;    \\n            } \\n        }\\n        \\n        $scope.revertFunc = function(){\\n            return;\\n        };       \\n        $scope.changeEventDates(event);\\n    }    \\n    \\n    $scope.changeEventDates = function(event,action){\\n        var end = \'\';\\n        var start = \'\';\\n        var action = action || \'edit\';\\n        \\n        if (event.end){\\n            end =  event.end.format();   \\n        }\\n        if (event.start){\\n            start =  event.start.format();   \\n        }\\n        var data = {\\n            enddate : end,\\n            startdate : start\\n        };\\n        if (event.allDay){\\n            data.allday = event.allDay;\\n        }        \\n        if (event.data){\\n            if (event.data.id){\\n               data.Event_categoryid = event.data.id; \\n            }            \\n            if (event.data.catid){\\n               data.Event_categoryid = event.data.catid; \\n            }\\n            if (event.data.eventid){\\n               data.event_id = event.data.eventid; \\n            }            \\n            \\n        }\\n        \\n        var event_id = event.id || \'new\';\\n        \\n        if (action == \'edit\'){\\n            $scope.editEvent(event_id , angular.toJson(data));  \\n        }\\n        if (action == \'update\'){\\n            $scope.updateEvent(event_id , angular.toJson(data));  \\n        }        \\n                  \\n    }\\n    \\n    $scope.hidePleaseWait = function(){\\n        if ($scope.waiting){\\n            UiDialog.hidePleaseWait(); \\n            $scope.waiting = false;     \\n        }\\n    }\\n    \\n    $scope.updateEvent = function(event_id,data) {\\n        var cfg = Config;\\n        cfg.method = \'POST\';\\n        \\n        var params = {\\n            \'configs\':\'migxcalendar_dragdropdate\',\\n            \'object_id\':event_id,\\n            \'action\':\'mgr\\/migxdb\\/update\'\\n        };\\n        \\n        var ajaxConfig = UiDialog.preparePostParams(cfg, params);\\n        ajaxConfig.data = {\\n            data : data \\n        };\\n        UiDialog.showPleaseWait();\\n        $http(ajaxConfig).success(function(response, status, header, config) {\\n            $scope.refresh();\\n            \\/\\/UiDialog.hidePleaseWait();\\n            $scope.waiting = true;\\n        }).error(function(data, status, header, config) {\\n            UiDialog.error(data, status, header, config);\\n        });        \\n    }\\n    \\n    $scope.editEvent = function(event_id,data) {\\n        var cfg = Config;\\n        cfg.method = \'POST\';\\n\\n        var dialogOptions = {};\\n\\n        var params = {};\\n\\n        params.configs = \'migxcalendar_dragdropdate\';\\n        \\/\\/params.action = \'mgr\\/migxdb\\/process\';\\n        params.action = \'web\\/migxdb\\/fields\';\\n        \\/\\/params.processaction = \'updateevent\';\\n        params.object_id = event_id;\\n        \\/\\/params.original_request_uri = request_uri;\\n        params.data = data;\\n        \\n        UiDialog.loadModal($scope, Config, params, dialogOptions);\\n        \\n        return; \\n        \\n    } \\n    \\n    $scope.refresh = function(){\\n        $(\'#calendar\').fullCalendar(\'refetchEvents\');\\n        $scope.relaodDateContainers();    \\n    }\\n    \\n    $scope.closecontainer = function(datecontainer){\\n        console.log($scope.date_containers[\'dc_\'+datecontainer.id]);\\n        console.log($scope.date_containers);\\n        \\n        if (datecontainer.id){\\n            delete $scope.date_containers[\'dc_\'+datecontainer.id];\\n        }\\n        \\n        \\n        \\n\\n        \\n        \\n    }\\n    \\n    $scope.relaodDateContainers = function(){\\n        $(\'.datecontainer\').each(function(){\\n            var data = $(this).data();\\n            if (data.eventid){\\n                $scope.loadDatesContainer(data.eventid);    \\n            }\\n        })\\n        \\n        \\n                    \\n    }\\n    \\n    $scope.loadDatesContainer = function(event_id){\\n       \\n            var cfg = Config;\\n            cfg.method = \'POST\';\\n            var dialogOptions = {};\\n            var params = {};\\n\\n            params.configs = \'migxcalendar_loadcontainer\';\\n            params.action = \'mgr\\/migxdb\\/process\';\\n            params.processaction = \'loadcontainer\';\\n            params.object_id = event_id;\\n            \\/\\/params.original_request_uri = request_uri;\\n            \\/\\/params.data = data;        \\n        \\n            var ajaxConfig = UiDialog.preparePostParams(cfg, params);\\n            ajaxConfig.data = {\\n                \\/\\/data: data\\n            };\\n\\n            $http(ajaxConfig).success(function(response, status, header, config) {\\n           \\n                if (response){\\n                    var success = response.success || false;\\n                    var message = response.message || \'\';\\n            \\n                    if (success && response.object) {\\n                        data = {};\\n                        data.item = response.object;\\n                        $scope.setDatesContainer(data);\\n                    } else {\\n                        alert(message);\\n                        return;\\n                    }                \\n                }\\n                \\/\\/$(\'#calendar\').fullCalendar( \'refetchEvents\' );\\n\\n            }).error(function(data, status, header, config) {\\n                \\/\\/UiDialog.error(data, status, header, config);\\n            });                   \\n    }\\n    \\n    $scope.setDatesContainer = function(data){\\n        $scope.date_containers = $scope.date_containers || {};\\n        if (typeof(data.item) != \'undefined\'){\\n            $scope.date_containers[\'dc_\' + data.item.id] = data.item;\\n            \\n            setTimeout(function(){\\n                $scope.$apply();\\n                \\/\\/style=\\"color:[[+textColor:default=``]];background-color:[[+backgroundColor:default=``]];\\"\\n                var color = data.item.Category_textColor && data.item.Category_textColor != \'\' ? data.item.Category_textColor : \'#FFFFFF\';\\n                var background_color = data.item.Category_backgroundColor && data.item.Category_backgroundColor != \'\' ? data.item.Category_backgroundColor : \'#3A87AD\';\\n            \\n                $(\'#datecontainer\'+data.item.id).css({\\n                    \'color\' : color,\\n                    \'background-color\' : background_color\\n                }).draggable({\\n                    zIndex: 999,\\n                    revert: true,      \\/\\/ immediately snap back to original position\\n                    revertDuration: 0  \\/\\/                \\n                });                \\n            },100);\\n        }\\n        return;\\n    }   \\n        \\n}   \\n\\n","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"var migxcalController = null;\\nvar migxcal_dragstart_day = null;\\n\\njQuery(document).ready(function() {\\n   migxcalController = $(\'#migxcalCtrl\').scope();\\n   \\n    $(\'.migxcal_category\').draggable({\\n        zIndex: 999,\\n        revert: true,      \\/\\/ immediately snap back to original position\\n        revertDuration: 0  \\/\\/\\n    });   \\n\\n});\\n\\nfunction migxcalCtrl($scope, $http, Config, UiDialog) {\\n    $scope.config = Config;\\n    $scope.eventResize = function(event,revertFunc){\\n        \\/*\\n        if (!confirm(\\"is this okay?\\")) {\\n            revertFunc();\\n            return;\\n        } \\n        *\\/\\n        $scope.revertFunc = revertFunc;\\n        event.allDay = event.allDay ? \'1\' : \'0\';       \\n        $scope.changeEventDates(event,\'update\');\\n    }\\n    $scope.eventDrop = function(event,revertFunc,jsEvent, ui, view){\\n        \\n        var day = event.start.dayOfYear();\\n        var week = event.start.isoWeek();\\n        \\/*                \\n        if (event.Event_repeating == \'1\' && migxcal_dragstart_day != day && !confirm(\\"[[%migxcal.warn_move_repeat_2other_day]]\\")) {\\n            \\/\\/move to other day\\n            revertFunc();\\n            return;\\n        }\\n        *\\/\\n        if (event.Event_repeating == \'1\' && migxcal_dragstart_week != week ) {\\n            \\/\\/move to other week\\n            alert(\\"[[%migxcal.warn_move_repeat_2other_week]]\\");\\n            revertFunc();\\n            return;\\n        }          \\n        \\n        $scope.revertFunc = revertFunc;       \\n        event.allDay = event.allDay ? \'1\' : \'0\'; \\n        $scope.changeEventDates(event,\'update\');\\n    }\\n    \\n    $scope.eventEdit = function(data){\\n        \\n        var event_id = data.id || 0; \\n        $scope.revertFunc = function(){};        \\n        $scope.editEvent(event_id);        \\n    } \\n    \\n    $scope.eventPublish = function(data){\\n        \\n        var event_id = data.id || 0;        \\n        var cfg = Config;\\n        cfg.method = \'POST\';\\n        var dialogOptions = {};\\n        var params = {};\\n\\n        params.configs = \'migxcalendar_dragdropdate\';\\n        params.action = \'mgr\\/migxdb\\/process\';\\n        params.processaction = \'publishdate\';\\n        params.object_id = event_id;\\n        \\/\\/params.original_request_uri = request_uri;\\n        params.data = data;        \\n        \\n        var ajaxConfig = UiDialog.preparePostParams(cfg, params);\\n        ajaxConfig.data = {\\n            \\/\\/data: data\\n        };\\n\\n        $http(ajaxConfig).success(function(response, status, header, config) {\\n           \\n            if (response){\\n            var success = response.success || false;\\n            var message = response.message || \'\';\\n            \\n            if (success) {\\n\\n            } else {\\n                alert(message);\\n            }                \\n            }\\n            $scope.refresh();\\n\\n        }).error(function(data, status, header, config) {\\n            \\/\\/UiDialog.error(data, status, header, config);\\n        });        \\n               \\n    }        \\n    \\n    $scope.eventDropNew = function(event,el){\\n        \\n        \\/*\\n        if (!confirm(\\"is this okay?\\")) {\\n            revertFunc();\\n            return;\\n        } \\n        *\\/\\n        if (el.scope){\\n            var datecontainer = el.scope().date_container;\\n            if (datecontainer && datecontainer.repeating == \'1\'){\\n                alert(\\"[[%migxcal.warn_dragnew_repeatingdate]]\\");\\n                return;    \\n            } \\n        }\\n        \\n        $scope.revertFunc = function(){\\n            return;\\n        };       \\n        $scope.changeEventDates(event);\\n    }    \\n    \\n    $scope.changeEventDates = function(event,action){\\n        var end = \'\';\\n        var start = \'\';\\n        var action = action || \'edit\';\\n        \\n        if (event.end){\\n            end =  event.end.format();   \\n        }\\n        if (event.start){\\n            start =  event.start.format();   \\n        }\\n        var data = {\\n            enddate : end,\\n            startdate : start\\n        };\\n        if (event.allDay){\\n            data.allday = event.allDay;\\n        }        \\n        if (event.data){\\n            if (event.data.id){\\n               data.Event_categoryid = event.data.id; \\n            }            \\n            if (event.data.catid){\\n               data.Event_categoryid = event.data.catid; \\n            }\\n            if (event.data.eventid){\\n               data.event_id = event.data.eventid; \\n            }            \\n            \\n        }\\n        \\n        var event_id = event.id || \'new\';\\n        \\n        if (action == \'edit\'){\\n            $scope.editEvent(event_id , angular.toJson(data));  \\n        }\\n        if (action == \'update\'){\\n            $scope.updateEvent(event_id , angular.toJson(data));  \\n        }        \\n                  \\n    }\\n    \\n    $scope.hidePleaseWait = function(){\\n        if ($scope.waiting){\\n            UiDialog.hidePleaseWait(); \\n            $scope.waiting = false;     \\n        }\\n    }\\n    \\n    $scope.updateEvent = function(event_id,data) {\\n        var cfg = Config;\\n        cfg.method = \'POST\';\\n        \\n        var params = {\\n            \'configs\':\'migxcalendar_dragdropdate\',\\n            \'object_id\':event_id,\\n            \'action\':\'mgr\\/migxdb\\/update\'\\n        };\\n        \\n        var ajaxConfig = UiDialog.preparePostParams(cfg, params);\\n        ajaxConfig.data = {\\n            data : data \\n        };\\n        UiDialog.showPleaseWait();\\n        $http(ajaxConfig).success(function(response, status, header, config) {\\n            $scope.refresh();\\n            \\/\\/UiDialog.hidePleaseWait();\\n            $scope.waiting = true;\\n        }).error(function(data, status, header, config) {\\n            UiDialog.error(data, status, header, config);\\n        });        \\n    }\\n    \\n    $scope.editEvent = function(event_id,data) {\\n        var cfg = Config;\\n        cfg.method = \'POST\';\\n\\n        var dialogOptions = {};\\n\\n        var params = {};\\n\\n        params.configs = \'migxcalendar_dragdropdate\';\\n        \\/\\/params.action = \'mgr\\/migxdb\\/process\';\\n        params.action = \'web\\/migxdb\\/fields\';\\n        \\/\\/params.processaction = \'updateevent\';\\n        params.object_id = event_id;\\n        \\/\\/params.original_request_uri = request_uri;\\n        params.data = data;\\n        \\n        UiDialog.loadModal($scope, Config, params, dialogOptions);\\n        \\n        return; \\n        \\n    } \\n    \\n    $scope.refresh = function(){\\n        $(\'#calendar\').fullCalendar(\'refetchEvents\');\\n        $scope.relaodDateContainers();    \\n    }\\n    \\n    $scope.closecontainer = function(datecontainer){\\n        console.log($scope.date_containers[\'dc_\'+datecontainer.id]);\\n        console.log($scope.date_containers);\\n        \\n        if (datecontainer.id){\\n            delete $scope.date_containers[\'dc_\'+datecontainer.id];\\n        }\\n        \\n        \\n        \\n\\n        \\n        \\n    }\\n    \\n    $scope.relaodDateContainers = function(){\\n        $(\'.datecontainer\').each(function(){\\n            var data = $(this).data();\\n            if (data.eventid){\\n                $scope.loadDatesContainer(data.eventid);    \\n            }\\n        })\\n        \\n        \\n                    \\n    }\\n    \\n    $scope.loadDatesContainer = function(event_id){\\n       \\n            var cfg = Config;\\n            cfg.method = \'POST\';\\n            var dialogOptions = {};\\n            var params = {};\\n\\n            params.configs = \'migxcalendar_loadcontainer\';\\n            params.action = \'mgr\\/migxdb\\/process\';\\n            params.processaction = \'loadcontainer\';\\n            params.object_id = event_id;\\n            \\/\\/params.original_request_uri = request_uri;\\n            \\/\\/params.data = data;        \\n        \\n            var ajaxConfig = UiDialog.preparePostParams(cfg, params);\\n            ajaxConfig.data = {\\n                \\/\\/data: data\\n            };\\n\\n            $http(ajaxConfig).success(function(response, status, header, config) {\\n           \\n                if (response){\\n                    var success = response.success || false;\\n                    var message = response.message || \'\';\\n            \\n                    if (success && response.object) {\\n                        data = {};\\n                        data.item = response.object;\\n                        $scope.setDatesContainer(data);\\n                    } else {\\n                        alert(message);\\n                        return;\\n                    }                \\n                }\\n                \\/\\/$(\'#calendar\').fullCalendar( \'refetchEvents\' );\\n\\n            }).error(function(data, status, header, config) {\\n                \\/\\/UiDialog.error(data, status, header, config);\\n            });                   \\n    }\\n    \\n    $scope.setDatesContainer = function(data){\\n        $scope.date_containers = $scope.date_containers || {};\\n        if (typeof(data.item) != \'undefined\'){\\n            $scope.date_containers[\'dc_\' + data.item.id] = data.item;\\n            \\n            setTimeout(function(){\\n                $scope.$apply();\\n                \\/\\/style=\\"color:[[+textColor:default=``]];background-color:[[+backgroundColor:default=``]];\\"\\n                var color = data.item.Category_textColor && data.item.Category_textColor != \'\' ? data.item.Category_textColor : \'#FFFFFF\';\\n                var background_color = data.item.Category_backgroundColor && data.item.Category_backgroundColor != \'\' ? data.item.Category_backgroundColor : \'#3A87AD\';\\n            \\n                $(\'#datecontainer\'+data.item.id).css({\\n                    \'color\' : color,\\n                    \'background-color\' : background_color\\n                }).draggable({\\n                    zIndex: 999,\\n                    revert: true,      \\/\\/ immediately snap back to original position\\n                    revertDuration: 0  \\/\\/                \\n                });                \\n            },100);\\n        }\\n        return;\\n    }   \\n        \\n}   \\n\\n"}',
        'guid' => '148804501ac4f71db8e11f608d4a7cb1',
        'native_key' => 2,
        'signature' => 'f30ba937e85dbd4dd97690ce0db065ef',
      ),
      'c48dd07348655d905e6f970d4eab6677' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"migxcalEditableOptions","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"   eventResize: function(event, revertFunc) {\\n        migxcalController.eventResize(event,revertFunc);\\n    },\\n    eventDrop: function(event, revertFunc,jsEvent, ui, view) {\\n        migxcalController.eventDrop(event,revertFunc,jsEvent, ui, view);\\n    },\\n    eventDragStart: function(event, jsEvent, ui, view) {\\n       migxcal_dragstart_day = event.start.dayOfYear();\\n       migxcal_dragstart_week = event.start.isoWeek();\\n    },    \\n    droppable: true,\\n    drop: function(moment, e ) {\\n        var el =  $(e.target);\\n        var event = {\\n            start : moment,\\n            data : el.data()\\n        }\\n        migxcalController.eventDropNew(event,el);   \\n    },\\n    eventAfterAllRender: function(view){\\n        migxcalController.hidePleaseWait();    \\n    },\\n    eventRender: function(event, element) {\\n        \\n        element.popover({\\n            content: event.popupmenu,\\n            html: true,\\n            placement: \'top\'\\n        });\\n        \\n        element.on(\'show.bs.popover\',function(){\\n            \\/\\/hide all other popovers\\n            $(\'.popover\').css({display:\'none\'}); \\n            $(\'.fc-event\').popover(\'hide\');\\n        });\\n        element.on(\'shown.bs.popover\',function(){\\n            $(\'.event-button\').click(function() {\\n                var data = $(this).data();\\n                var action = data.action;\\n                if (action == \'edit\'){\\n                    migxcalController.eventEdit(data);    \\n                }\\n                if (action == \'publish\'){\\n                    migxcalController.eventPublish(data);    \\n                } \\n                if (action == \'unpublish\'){\\n                    migxcalController.eventPublish(data);     \\n                }\\n                if (action == \'loadcontainer\'){\\n                    if (data.eventid){\\n                        migxcalController.loadDatesContainer(data.eventid);     \\n                    }\\n                }                                                     \\n                \\n            \\n            });              \\n        });        \\n    },    \\n    viewRender: function(view, element) {\\n        migxcal_history(view,element,\'[[+currentUrl]]\');\\n    }   ","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"   eventResize: function(event, revertFunc) {\\n        migxcalController.eventResize(event,revertFunc);\\n    },\\n    eventDrop: function(event, revertFunc,jsEvent, ui, view) {\\n        migxcalController.eventDrop(event,revertFunc,jsEvent, ui, view);\\n    },\\n    eventDragStart: function(event, jsEvent, ui, view) {\\n       migxcal_dragstart_day = event.start.dayOfYear();\\n       migxcal_dragstart_week = event.start.isoWeek();\\n    },    \\n    droppable: true,\\n    drop: function(moment, e ) {\\n        var el =  $(e.target);\\n        var event = {\\n            start : moment,\\n            data : el.data()\\n        }\\n        migxcalController.eventDropNew(event,el);   \\n    },\\n    eventAfterAllRender: function(view){\\n        migxcalController.hidePleaseWait();    \\n    },\\n    eventRender: function(event, element) {\\n        \\n        element.popover({\\n            content: event.popupmenu,\\n            html: true,\\n            placement: \'top\'\\n        });\\n        \\n        element.on(\'show.bs.popover\',function(){\\n            \\/\\/hide all other popovers\\n            $(\'.popover\').css({display:\'none\'}); \\n            $(\'.fc-event\').popover(\'hide\');\\n        });\\n        element.on(\'shown.bs.popover\',function(){\\n            $(\'.event-button\').click(function() {\\n                var data = $(this).data();\\n                var action = data.action;\\n                if (action == \'edit\'){\\n                    migxcalController.eventEdit(data);    \\n                }\\n                if (action == \'publish\'){\\n                    migxcalController.eventPublish(data);    \\n                } \\n                if (action == \'unpublish\'){\\n                    migxcalController.eventPublish(data);     \\n                }\\n                if (action == \'loadcontainer\'){\\n                    if (data.eventid){\\n                        migxcalController.loadDatesContainer(data.eventid);     \\n                    }\\n                }                                                     \\n                \\n            \\n            });              \\n        });        \\n    },    \\n    viewRender: function(view, element) {\\n        migxcal_history(view,element,\'[[+currentUrl]]\');\\n    }   "}',
        'guid' => 'b0ee0c85712dcfe9a869bb8212595a59',
        'native_key' => 3,
        'signature' => 'ffe9a94d3d3ba68faa06d5068b069066',
      ),
      '0e3a09ee7ca57951864af1cacfe2a379' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":4,"source":0,"property_preprocess":0,"name":"migxcal_eventbuttons","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"    <div class=\\"btn-group event-buttons\\">\\n    [[+published:is=`1`:then=`\\n    <button type=\\"button\\" data-id=\\"[[+id]]\\" data-action=\\"unpublish\\" class=\\"btn btn-default event-button btn-sm\\">\\n        <span  class=\\"glyphicon glyphicon-ban-circle\\"><\\/span> \\n    <\\/button> \\n    `:else=`\\n    <button type=\\"button\\" data-id=\\"[[+id]]\\" data-action=\\"publish\\" class=\\"btn btn-default event-button btn-sm\\">    \\n        <span class=\\"glyphicon glyphicon-ok-circle\\"><\\/span> \\n    <\\/button>         \\n    `]]\\n    <button type=\\"button\\" data-eventid=\\"[[+Event_id]]\\" data-action=\\"loadcontainer\\" class=\\"btn btn-default event-button btn-sm\\">\\n    <span class=\\"glyphicon glyphicon-open\\"><\\/span> \\n    <\\/button>     \\n    <button type=\\"button\\" data-id=\\"[[+id]]\\" data-action=\\"edit\\" class=\\"btn btn-default event-button btn-sm\\">\\n    <span class=\\"glyphicon glyphicon-pencil\\"><\\/span> \\n    <\\/button> \\n       \\n   \\n    <\\/div>","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"    <div class=\\"btn-group event-buttons\\">\\n    [[+published:is=`1`:then=`\\n    <button type=\\"button\\" data-id=\\"[[+id]]\\" data-action=\\"unpublish\\" class=\\"btn btn-default event-button btn-sm\\">\\n        <span  class=\\"glyphicon glyphicon-ban-circle\\"><\\/span> \\n    <\\/button> \\n    `:else=`\\n    <button type=\\"button\\" data-id=\\"[[+id]]\\" data-action=\\"publish\\" class=\\"btn btn-default event-button btn-sm\\">    \\n        <span class=\\"glyphicon glyphicon-ok-circle\\"><\\/span> \\n    <\\/button>         \\n    `]]\\n    <button type=\\"button\\" data-eventid=\\"[[+Event_id]]\\" data-action=\\"loadcontainer\\" class=\\"btn btn-default event-button btn-sm\\">\\n    <span class=\\"glyphicon glyphicon-open\\"><\\/span> \\n    <\\/button>     \\n    <button type=\\"button\\" data-id=\\"[[+id]]\\" data-action=\\"edit\\" class=\\"btn btn-default event-button btn-sm\\">\\n    <span class=\\"glyphicon glyphicon-pencil\\"><\\/span> \\n    <\\/button> \\n       \\n   \\n    <\\/div>"}',
        'guid' => '7cadb9afed7338e85baa4283aef0d371',
        'native_key' => 4,
        'signature' => '106be612c57988d3d781ae2c40f82b99',
      ),
      '7b1a9b9c1a27d5233731784725054711' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":5,"source":0,"property_preprocess":0,"name":"migxcalExtraOptions","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"    eventRender: function(event, element) {\\n        \\n        element.on(\'click\', function(){\\n            $(\'#event-detail-title\').html(event.title);\\n            $(\'#event-detail-body\').html(event.modalBody);\\n            $(\'#event-detail\').modal(\'show\');\\n        });\\n    },\\n    viewRender: function(view, element) {\\n        migxcal_history(view,element,\'[[+currentUrl]]\');\\n    }\\n       ","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"    eventRender: function(event, element) {\\n        \\n        element.on(\'click\', function(){\\n            $(\'#event-detail-title\').html(event.title);\\n            $(\'#event-detail-body\').html(event.modalBody);\\n            $(\'#event-detail\').modal(\'show\');\\n        });\\n    },\\n    viewRender: function(view, element) {\\n        migxcal_history(view,element,\'[[+currentUrl]]\');\\n    }\\n       "}',
        'guid' => '41a058a5c72b8663b8bbfb092888cb78',
        'native_key' => 5,
        'signature' => '7b597ac30bf00e7673144159404b04ff',
      ),
      'e03c2b563d5313855e1ad2fa8820cc61' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":6,"source":0,"property_preprocess":0,"name":"migxcal_modalBodyTpl","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"<strong>[[%migxcal.start]]:<\\/strong> [[+startdate:strtotime:date=`%d.%m.%Y %H:%M`]] <br \\/>\\n<strong>[[%migxcal.end]]:<\\/strong> [[+enddate:strtotime:date=`%d.%m.%Y %H:%M`]] <br \\/>\\n<br \\/><br \\/>\\n[[+Event_description]] \\n<br \\/><br \\/>\\n[[+description]]\\n<br \\/><br \\/>\\n[[+detail_id:isnot=``:then=`\\n<a href=\\"[[[[+detail_id:isnot=``:then=`~[[+detail_id]]? &date_id=`[[+id]]``:else=``]]]]\\">Details<\\/a>\\n`:else=``]]\\n","locked":0,"properties":null,"static":0,"static_file":"","content":"<strong>[[%migxcal.start]]:<\\/strong> [[+startdate:strtotime:date=`%d.%m.%Y %H:%M`]] <br \\/>\\n<strong>[[%migxcal.end]]:<\\/strong> [[+enddate:strtotime:date=`%d.%m.%Y %H:%M`]] <br \\/>\\n<br \\/><br \\/>\\n[[+Event_description]] \\n<br \\/><br \\/>\\n[[+description]]\\n<br \\/><br \\/>\\n[[+detail_id:isnot=``:then=`\\n<a href=\\"[[[[+detail_id:isnot=``:then=`~[[+detail_id]]? &date_id=`[[+id]]``:else=``]]]]\\">Details<\\/a>\\n`:else=``]]\\n"}',
        'guid' => 'bd2d50b152b28dc17fb0225ecece571c',
        'native_key' => 6,
        'signature' => '90ee6ac7659f2aa2e6b0bfcff2716c9d',
      ),
      '902f59cbc9983a2d8dc6b2ce34a0e4bf' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":7,"source":0,"property_preprocess":0,"name":"migxcal_detailTpl","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\n<h2>[[+Event_title]]<\\/h2>\\n\\n<h3>[[+title]] [[+startdate:strtotime:date=`%d.%m.%Y %H:%M:%S`]] - [[+enddate:strtotime:date=`%d.%m.%Y %H:%M:%S`]]<\\/h3>\\n\\n[[+Event_description]]\\n","locked":0,"properties":null,"static":0,"static_file":"","content":"\\n<h2>[[+Event_title]]<\\/h2>\\n\\n<h3>[[+title]] [[+startdate:strtotime:date=`%d.%m.%Y %H:%M:%S`]] - [[+enddate:strtotime:date=`%d.%m.%Y %H:%M:%S`]]<\\/h3>\\n\\n[[+Event_description]]\\n"}',
        'guid' => 'c1e7bcd9d7c615fcc988273347c22b39',
        'native_key' => 7,
        'signature' => '61907fdf831a0d57b0ae027d8f3524b1',
      ),
      'a16bc6b3f46f4c2698faf58cc954826c' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":8,"source":0,"property_preprocess":0,"name":"migxcal_minical","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"[[!bloX? &configs=`migxcal_minical` &component=`migxcalendars`]]","locked":0,"properties":null,"static":0,"static_file":"","content":"[[!bloX? &configs=`migxcal_minical` &component=`migxcalendars`]]"}',
        'guid' => '297750c6529984e23ab81c2f613e934b',
        'native_key' => 8,
        'signature' => '59f8eccf2a94eb357300a5bb76346871',
      ),
      '0e1996f242ffa1c2efa97eea4966b19a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":9,"source":0,"property_preprocess":0,"name":"migxcal_availiabledates","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"[[!bloX? &configs=`availiabledates` &component=`migxcalendars` &category=`3`]]","locked":0,"properties":null,"static":0,"static_file":"","content":"[[!bloX? &configs=`availiabledates` &component=`migxcalendars` &category=`3`]]"}',
        'guid' => 'a3b75f2cc4d3847f7d33aaf29dae40b5',
        'native_key' => 9,
        'signature' => '8dd575be23f5b80b8dc0e3af92de2b7a',
      ),
    ),
    'Snippets' => 
    array (
      '00aec923709e9aa8d02ff7998a9773a4' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"migxcalGetEvents","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * @author Bruno Perner\\n * @copyright 2014\\n *\\/\\n\\n\\/\\/--------------------------------------------------------------------------------------------------\\n\\/\\/ This script reads event data from a JSON file and outputs those events which are within the range\\n\\/\\/ supplied by the \\"start\\" and \\"end\\" GET parameters.\\n\\/\\/\\n\\/\\/ An optional \\"timezone\\" GET parameter will force all ISO8601 date stings to a given timezone.\\n\\/\\/\\n\\/\\/ Requires PHP 5.2.0 or higher.\\n\\/\\/--------------------------------------------------------------------------------------------------\\n\\n\\/\\/ Require our Event class and datetime utilities\\nrequire $modx->getOption(\'core_path\') . \'components\\/migxcalendars\\/model\\/fullcalendar\\/php\\/utils.php\';\\n\\n\\/\\/ Short-circuit if the client did not give us a date range.\\nif (!isset($_GET[\'start\']) || !isset($_GET[\'end\'])) {\\n    \\/\\/die(\\"Please provide a date range.\\");\\n}\\n\\n$eventbuttonsTpl = $modx->getOption(\'eventbuttonsTpl\', $scriptProperties, \'migxcal_eventbuttons\');\\n$modalBodyTpl = $modx->getOption(\'modalBodyTpl\', $scriptProperties, \'migxcal_modalBodyTpl\');\\n$detail_id = $modx->getOption(\'detail_id\', $scriptProperties, \'\');\\n\\n$scriptProperties[\'packageName\'] = \'migxcalendars\';\\n$scriptProperties[\'classname\'] = \'migxCalendarDates\';\\n$scriptProperties[\'toJsonPlaceholder\'] = \'migxcal_events\';\\n$scriptProperties[\'selectfields\'] = $modx->getOption(\'datefields\', $scriptProperties, \'id,startdate,enddate,title,allday,published,description\');\\n$joins = \'[{\\"alias\\":\\"Event\\",\\"selectfields\\":\\"id,title,allday,repeating,description\\"},{\\"alias\\":\\"Category\\",\\"classname\\":\\"migxCalendarCategories\\",\\"on\\":\\"Category.id=Event.categoryid\\"}]\';\\n$scriptProperties[\'joins\'] = $modx->getOption(\'joins\',$scriptProperties,$joins);\\n\\n\\/\\/ Parse the start\\/end parameters.\\n\\/\\/ These are assumed to be ISO8601 strings with no time nor timezone, like \\"2013-12-29\\".\\n\\/\\/ Since no timezone will be present, they will parsed as UTC.\\n\\nif ($modx->lexicon) {\\n    $modx->lexicon->load($scriptProperties[\'packageName\'] . \':default\');\\n}\\n\\n$start = $modx->getOption(\'start\', $_GET, \'\');\\n$end = $modx->getOption(\'end\', $_GET, \'\');\\n$categories = $modx->getOption(\'categories\', $_GET, \'\');\\n\\n$range_start = parseDateTime($start);\\n$range_end = parseDateTime($end);\\n$wheres = array();\\n\\n$wheres[] = array(\'migxCalendarDates.startdate:<=\' => $end, \'migxCalendarDates.enddate:>=\' => $start);\\n$wheres[] = array(\'Event.deleted\' => 0, \'Event.published\' => 1);\\n\\nif (is_array($categories)) {\\n    $cat_array = array();\\n    foreach ($categories as $category) {\\n        if (!empty($category) && is_numeric($category)) {\\n            $cat_array[] = $category;\\n        }\\n    }\\n    if (count($cat_array) > 0) {\\n        $wheres[] = array(\'Category.id:IN\' => $cat_array);\\n    }\\n}\\n\\n$hide_published = $modx->getOption(\'c_hide_published\', $categories, 0);\\n$show_unpublished = $modx->getOption(\'c_show_unpublished\', $categories, 0);\\nif (!empty($show_unpublished) && empty($hide_published)) {\\n\\n} else {\\n    if (empty($show_unpublished)) {\\n        $wheres[] = array(\'migxCalendarDates.published\' => 1);\\n    }\\n    if (!empty($hide_published)) {\\n        $wheres[] = array(\'migxCalendarDates.published:!=\' => 1);\\n    }\\n}\\n\\n$scriptProperties[\'where\'] = $modx->toJson($wheres);\\n\\n\\/\\/ Parse the timezone parameter if it is present.\\n$timezone = null;\\nif (isset($_GET[\'timezone\'])) {\\n    $timezone = new DateTimeZone($_GET[\'timezone\']);\\n}\\n\\n\\/\\/ Read and parse our events JSON file into an array of event data arrays.\\n\\/\\/$json = file_get_contents(dirname(__FILE__) . \'\\/..\\/json\\/events.json\');\\n\\n\\/\\/$scriptProperties[\'debug\'] = \'1\';\\n$modx->runSnippet(\'migxLoopCollection\', $scriptProperties);\\n$result = $modx->getPlaceholder(\'migxcal_events\');\\n$input_arrays = json_decode($result, true);\\n\\/\\/ Accumulate an output array of event data arrays.\\n$output_arrays = array();\\nforeach ($input_arrays as $array) {\\n\\n    $array[\'start\'] = $array[\'startdate\'];\\n    $array[\'end\'] = $array[\'enddate\'];\\n    \\n    $array[\'detail_id\'] = $detail_id;\\n\\n    if (isset($array[\'Event_allday\']) && isset($array[\'allday\']) && $array[\'allday\'] == \'2\') {\\n        \\/\\/inherit\\n        $array[\'allDay\'] = $array[\'Event_allday\'];\\n    } else {\\n        $array[\'allDay\'] = $array[\'allday\'];\\n    }\\n\\n    $array[\'title\'] = !empty($array[\'title\']) ? $array[\'title\'] : $array[\'Event_title\'];\\n    if (!empty($array[\'Category_backgroundColor\'])) {\\n        $array[\'backgroundColor\'] = $array[\'Category_backgroundColor\'];\\n    }\\n    if (!empty($array[\'Category_borderColor\'])) {\\n        $array[\'borderColor\'] = $array[\'Category_borderColor\'];\\n\\n    }\\n    if (!empty($array[\'Category_textColor\'])) {\\n        $array[\'textColor\'] = $array[\'Category_textColor\'];\\n    }\\n\\n    $array[\'popupmenu\'] = $modx->getChunk($eventbuttonsTpl, $array);\\n    $wd = date(\'D\', strtotime($array[\'startdate\']));\\n    \\n    if (!empty($modalBodyTpl)){\\n        $array[\'modalBody\'] = $modx->getChunk($modalBodyTpl, $array);     \\n    }\\n\\n    $array[\'popup_placement\'] = $wd == \'Sun\' ? \'left\' : \'right\';\\n\\n    \\/\\/ Convert the input array into a useful Event object\\n    $event = new Event($array, $timezone);\\n\\n    \\/\\/ If the event is in-bounds, add it to the output\\n    \\/*\\n    if ($event->isWithinDayRange($range_start, $range_end)) {\\n    $output_arrays[] = $event->toArray();\\n    }\\n    *\\/\\n    $output_arrays[] = $event->toArray();\\n\\n}\\n\\n\\/\\/ Send JSON to the client.\\nreturn json_encode($output_arrays);","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @author Bruno Perner\\n * @copyright 2014\\n *\\/\\n\\n\\/\\/--------------------------------------------------------------------------------------------------\\n\\/\\/ This script reads event data from a JSON file and outputs those events which are within the range\\n\\/\\/ supplied by the \\"start\\" and \\"end\\" GET parameters.\\n\\/\\/\\n\\/\\/ An optional \\"timezone\\" GET parameter will force all ISO8601 date stings to a given timezone.\\n\\/\\/\\n\\/\\/ Requires PHP 5.2.0 or higher.\\n\\/\\/--------------------------------------------------------------------------------------------------\\n\\n\\/\\/ Require our Event class and datetime utilities\\nrequire $modx->getOption(\'core_path\') . \'components\\/migxcalendars\\/model\\/fullcalendar\\/php\\/utils.php\';\\n\\n\\/\\/ Short-circuit if the client did not give us a date range.\\nif (!isset($_GET[\'start\']) || !isset($_GET[\'end\'])) {\\n    \\/\\/die(\\"Please provide a date range.\\");\\n}\\n\\n$eventbuttonsTpl = $modx->getOption(\'eventbuttonsTpl\', $scriptProperties, \'migxcal_eventbuttons\');\\n$modalBodyTpl = $modx->getOption(\'modalBodyTpl\', $scriptProperties, \'migxcal_modalBodyTpl\');\\n$detail_id = $modx->getOption(\'detail_id\', $scriptProperties, \'\');\\n\\n$scriptProperties[\'packageName\'] = \'migxcalendars\';\\n$scriptProperties[\'classname\'] = \'migxCalendarDates\';\\n$scriptProperties[\'toJsonPlaceholder\'] = \'migxcal_events\';\\n$scriptProperties[\'selectfields\'] = $modx->getOption(\'datefields\', $scriptProperties, \'id,startdate,enddate,title,allday,published,description\');\\n$joins = \'[{\\"alias\\":\\"Event\\",\\"selectfields\\":\\"id,title,allday,repeating,description\\"},{\\"alias\\":\\"Category\\",\\"classname\\":\\"migxCalendarCategories\\",\\"on\\":\\"Category.id=Event.categoryid\\"}]\';\\n$scriptProperties[\'joins\'] = $modx->getOption(\'joins\',$scriptProperties,$joins);\\n\\n\\/\\/ Parse the start\\/end parameters.\\n\\/\\/ These are assumed to be ISO8601 strings with no time nor timezone, like \\"2013-12-29\\".\\n\\/\\/ Since no timezone will be present, they will parsed as UTC.\\n\\nif ($modx->lexicon) {\\n    $modx->lexicon->load($scriptProperties[\'packageName\'] . \':default\');\\n}\\n\\n$start = $modx->getOption(\'start\', $_GET, \'\');\\n$end = $modx->getOption(\'end\', $_GET, \'\');\\n$categories = $modx->getOption(\'categories\', $_GET, \'\');\\n\\n$range_start = parseDateTime($start);\\n$range_end = parseDateTime($end);\\n$wheres = array();\\n\\n$wheres[] = array(\'migxCalendarDates.startdate:<=\' => $end, \'migxCalendarDates.enddate:>=\' => $start);\\n$wheres[] = array(\'Event.deleted\' => 0, \'Event.published\' => 1);\\n\\nif (is_array($categories)) {\\n    $cat_array = array();\\n    foreach ($categories as $category) {\\n        if (!empty($category) && is_numeric($category)) {\\n            $cat_array[] = $category;\\n        }\\n    }\\n    if (count($cat_array) > 0) {\\n        $wheres[] = array(\'Category.id:IN\' => $cat_array);\\n    }\\n}\\n\\n$hide_published = $modx->getOption(\'c_hide_published\', $categories, 0);\\n$show_unpublished = $modx->getOption(\'c_show_unpublished\', $categories, 0);\\nif (!empty($show_unpublished) && empty($hide_published)) {\\n\\n} else {\\n    if (empty($show_unpublished)) {\\n        $wheres[] = array(\'migxCalendarDates.published\' => 1);\\n    }\\n    if (!empty($hide_published)) {\\n        $wheres[] = array(\'migxCalendarDates.published:!=\' => 1);\\n    }\\n}\\n\\n$scriptProperties[\'where\'] = $modx->toJson($wheres);\\n\\n\\/\\/ Parse the timezone parameter if it is present.\\n$timezone = null;\\nif (isset($_GET[\'timezone\'])) {\\n    $timezone = new DateTimeZone($_GET[\'timezone\']);\\n}\\n\\n\\/\\/ Read and parse our events JSON file into an array of event data arrays.\\n\\/\\/$json = file_get_contents(dirname(__FILE__) . \'\\/..\\/json\\/events.json\');\\n\\n\\/\\/$scriptProperties[\'debug\'] = \'1\';\\n$modx->runSnippet(\'migxLoopCollection\', $scriptProperties);\\n$result = $modx->getPlaceholder(\'migxcal_events\');\\n$input_arrays = json_decode($result, true);\\n\\/\\/ Accumulate an output array of event data arrays.\\n$output_arrays = array();\\nforeach ($input_arrays as $array) {\\n\\n    $array[\'start\'] = $array[\'startdate\'];\\n    $array[\'end\'] = $array[\'enddate\'];\\n    \\n    $array[\'detail_id\'] = $detail_id;\\n\\n    if (isset($array[\'Event_allday\']) && isset($array[\'allday\']) && $array[\'allday\'] == \'2\') {\\n        \\/\\/inherit\\n        $array[\'allDay\'] = $array[\'Event_allday\'];\\n    } else {\\n        $array[\'allDay\'] = $array[\'allday\'];\\n    }\\n\\n    $array[\'title\'] = !empty($array[\'title\']) ? $array[\'title\'] : $array[\'Event_title\'];\\n    if (!empty($array[\'Category_backgroundColor\'])) {\\n        $array[\'backgroundColor\'] = $array[\'Category_backgroundColor\'];\\n    }\\n    if (!empty($array[\'Category_borderColor\'])) {\\n        $array[\'borderColor\'] = $array[\'Category_borderColor\'];\\n\\n    }\\n    if (!empty($array[\'Category_textColor\'])) {\\n        $array[\'textColor\'] = $array[\'Category_textColor\'];\\n    }\\n\\n    $array[\'popupmenu\'] = $modx->getChunk($eventbuttonsTpl, $array);\\n    $wd = date(\'D\', strtotime($array[\'startdate\']));\\n    \\n    if (!empty($modalBodyTpl)){\\n        $array[\'modalBody\'] = $modx->getChunk($modalBodyTpl, $array);     \\n    }\\n\\n    $array[\'popup_placement\'] = $wd == \'Sun\' ? \'left\' : \'right\';\\n\\n    \\/\\/ Convert the input array into a useful Event object\\n    $event = new Event($array, $timezone);\\n\\n    \\/\\/ If the event is in-bounds, add it to the output\\n    \\/*\\n    if ($event->isWithinDayRange($range_start, $range_end)) {\\n    $output_arrays[] = $event->toArray();\\n    }\\n    *\\/\\n    $output_arrays[] = $event->toArray();\\n\\n}\\n\\n\\/\\/ Send JSON to the client.\\nreturn json_encode($output_arrays);"}',
        'guid' => '7600cdc2a85a034b6700b4ec51443f18',
        'native_key' => 1,
        'signature' => '45c63d3196722ce6611b717974ace344',
      ),
      '8276b008f23b1bf5d19aadc471e03d74' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"migxcalCalendar","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$lang = $modx->getOption(\'lang\', $scriptProperties, $modx->getOption(\'cultureKey\'));\\n$editable = $modx->getOption(\'editable\', $scriptProperties, \'false\');\\n$aspectRatio = (float)$modx->getOption(\'aspectRatio\', $scriptProperties, \'0.4\');\\n$minTime = $modx->getOption(\'minTime\', $scriptProperties, \'6:00\');\\n$defaultView = $modx->getOption(\'defaultView\', $scriptProperties, \'agendaWeek\');\\n\\n$ajax_id = $modx->getOption(\'ajax_id\', $scriptProperties, $modx->getOption(\'migxcalendar.ajax_id\'));\\n$ajax_url = $modx->makeUrl($ajax_id);\\n\\n$load_jquery = $modx->getOption(\'load_jquery\', $scriptProperties, \'1\');\\n$load_jqueryui = $modx->getOption(\'load_jqueryui\', $scriptProperties, \'1\');\\n$load_bootstrap = $modx->getOption(\'load_bootstrap\', $scriptProperties, \'1\');\\n$load_fullcalendar = $modx->getOption(\'load_fullcalendar\', $scriptProperties, \'1\');\\n\\n$packageName = $modx->getOption(\'packageName\', $scriptProperties, \'migxcalendars\');\\n\\n$params = $_REQUEST;\\n\\n$categories = $modx->getOption(\'categories\', $params, \'\');\\n$date = $modx->getOption(\'date\', $params, \'\');\\n$view = $modx->getOption(\'view\', $params, $defaultView);\\n\\n$scriptProperties[\'currentUrl\'] = $modx->makeUrl($modx->resource->get(\'id\'));\\n\\nif (!empty($date)) {\\n    $defaultDate = \\"defaultDate : \'\\" . $date . \\"\',\\";\\n}\\n\\n$extraOptionsTpl = $modx->getOption(\'extraOptionsTpl\', $scriptProperties, \'\');\\n\\n$extraOptions = !empty($extraOptionsTpl) ? \',\' . $modx->getChunk($extraOptionsTpl,$scriptProperties) : \'\';\\n\\nif ($modx->lexicon) {\\n    $modx->lexicon->load($packageName . \':default\');\\n}\\n\\nif (!empty($load_fullcalendar)) {\\n    $script = \\"\\n<script>\\nvar initialLoad = true;    \\nvar poppingState = false;\\n\\nwindow.onpopstate = function(event){\\n    if (event.state.start){\\n        if ( typeof migxcalController != \'undefined\' ){\\n            migxcalController.config.baseParams.original_request_uri = event.state.url; \\n        }\\n        poppingState = true; \\/\\/don\'t re-push state\\n        $(\'#calendar\').fullCalendar(\'gotoDate\', event.state.start);\\n        poppingState = true; \\/\\/don\'t re-push state\\n        $(\'#calendar\').fullCalendar(\'changeView\', event.state.viewMode);\\n\\n    }\\n\\n}\\n\\nif (window.history){\\n    var windowHistory = window.history;\\n    \\/\\/ symlink to method \'history.pushState\'\\n    var historyPushState = windowHistory.pushState;\\n    \\/\\/ if the browser supports HTML5-History-API\\n    var isSupportHistoryAPI = !!historyPushState; \\n}\\n\\nvar migxcal_history = function(view,element,url){\\n\\n    \\/\\/ Prevent the code from running if there is no window.history object\\n    if (!window.history) return;\\n    var date_param = \'?date=\' + view.intervalStart.format(\'YYYY-MM-DD\');\\n    var view_param = \'&view=\' + view.name;\\n    \\n    url = isSupportHistoryAPI ? url : \'\';\\n    url = url + date_param + view_param;\\n\\n        \\n    if (initialLoad) { \\/\\/Replace the current state to set up state variables.  URL should be identical\\n        history.replaceState({ viewMode:view.name, start:view.intervalStart, url:url }, \'Edit Calendar\', url);\\n        if ( typeof migxcalController != \'undefined\' ){\\n            migxcalController.config.baseParams.original_request_uri = url; \\n        }\\n        initialLoad = false;\\n    }else{\\n        if (!poppingState) { \\n            history.pushState({ viewMode:view.name, start:view.intervalStart, url:url }, \'Edit Calendar\', url); \\n            if (typeof migxcalController != \'undefined\'){\\n                migxcalController.config.baseParams.original_request_uri = url; \\n            }\\n        }else{\\n            poppingState = false;\\n    }\\n}\\n\\n};\\n\\n\\t$(document).ready(function() {\\n\\t    var migxcal_categories = {};\\n        \\n\\t\\t$(\'#calendar\').fullCalendar({\\n\\t\\t\\theader: {\\n\\t\\t\\t\\tleft: \'prev,next today\',\\n\\t\\t\\t\\tcenter: \'title\',\\n\\t\\t\\t\\tright: \'month,agendaWeek,agendaDay\'\\n\\t\\t\\t},\\n\\t\\t\\t{$defaultDate}\\n\\t\\t\\tlang: \'{$lang}\',\\n            editable: {$editable},\\n            aspectRatio: {$aspectRatio},\\n            minTime: \'{$minTime}\',\\n            defaultView:\'{$view}\',\\n\\t\\t\\tevents: {\\n\\t\\t\\t\\turl: \'{$ajax_url}\',\\n                data: function() {\\n                    return {categories:migxcal_categories};\\n                },                \\n\\t\\t\\t\\terror: function() {\\n\\t\\t\\t\\t\\t$(\'#script-warning\').show();\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tloading: function(bool) {\\n\\t\\t\\t\\t$(\'#loading\').toggle(bool);\\n\\t\\t\\t}\\n            {$extraOptions}\\n            \\n\\t\\t});\\n        $(\'.migxcal_category\').click(function(){\\n            var el = $(this);\\n            var id = el.data().id;\\n            el.toggleClass(\'selected\');\\n            if (el.hasClass(\'selected\')){\\n                migxcal_categories[\'c_\' + id] = id; \\n            }\\n            else{\\n                migxcal_categories[\'c_\' + id] = 0; \\n            }\\n            $(\'#calendar\').fullCalendar( \'refetchEvents\' );\\n        });\\n\\t\\t\\n\\t});\\n\\n<\\/script>\\n\\";\\n\\n\\n    $modx->regClientCSS(\'assets\\/components\\/migxcalendars\\/js\\/fullcalendar\\/fullcalendar.css\');\\n    $modx->regClientStartupHTMLBlock(\'<link type=\\"text\\/css\\" href=\\"assets\\/components\\/migxcalendars\\/js\\/fullcalendar\\/fullcalendar.print.css\\" rel=\\"stylesheet\\" media=\\"print\\">\');\\n}\\n\\nif (!empty($load_jquery)) {\\n    $modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/lib\\/jquery.min.js\');\\n}\\nif (!empty($load_jquery)) {\\n    $modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/lib\\/jquery-ui.custom.min.js\');\\n}\\n\\nif (!empty($load_bootstrap)) {\\n    $modx->regClientScript(\'assets\\/components\\/migxangular\\/bootstrap-3.0.0\\/js\\/bootstrap.min.js\');\\n    $modx->regClientCSS(\'assets\\/components\\/migxangular\\/bootstrap-3.0.0\\/css\\/bootstrap.custom.css\');\\n}\\n$modx->regClientCSS(\'assets\\/components\\/migxcalendars\\/css\\/style.css\');\\n\\nif (!empty($load_fullcalendar)) {\\n    $modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/lib\\/moment.min.js\');\\n    $modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/fullcalendar\\/fullcalendar.min.js\');\\n    $modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/fullcalendar\\/lang\\/\' . $lang . \'.js\');\\n    $modx->regClientHTMLBlock($script);\\n}\\n$modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/history\\/history.min.js\');","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"$lang = $modx->getOption(\'lang\', $scriptProperties, $modx->getOption(\'cultureKey\'));\\n$editable = $modx->getOption(\'editable\', $scriptProperties, \'false\');\\n$aspectRatio = (float)$modx->getOption(\'aspectRatio\', $scriptProperties, \'0.4\');\\n$minTime = $modx->getOption(\'minTime\', $scriptProperties, \'6:00\');\\n$defaultView = $modx->getOption(\'defaultView\', $scriptProperties, \'agendaWeek\');\\n\\n$ajax_id = $modx->getOption(\'ajax_id\', $scriptProperties, $modx->getOption(\'migxcalendar.ajax_id\'));\\n$ajax_url = $modx->makeUrl($ajax_id);\\n\\n$load_jquery = $modx->getOption(\'load_jquery\', $scriptProperties, \'1\');\\n$load_jqueryui = $modx->getOption(\'load_jqueryui\', $scriptProperties, \'1\');\\n$load_bootstrap = $modx->getOption(\'load_bootstrap\', $scriptProperties, \'1\');\\n$load_fullcalendar = $modx->getOption(\'load_fullcalendar\', $scriptProperties, \'1\');\\n\\n$packageName = $modx->getOption(\'packageName\', $scriptProperties, \'migxcalendars\');\\n\\n$params = $_REQUEST;\\n\\n$categories = $modx->getOption(\'categories\', $params, \'\');\\n$date = $modx->getOption(\'date\', $params, \'\');\\n$view = $modx->getOption(\'view\', $params, $defaultView);\\n\\n$scriptProperties[\'currentUrl\'] = $modx->makeUrl($modx->resource->get(\'id\'));\\n\\nif (!empty($date)) {\\n    $defaultDate = \\"defaultDate : \'\\" . $date . \\"\',\\";\\n}\\n\\n$extraOptionsTpl = $modx->getOption(\'extraOptionsTpl\', $scriptProperties, \'\');\\n\\n$extraOptions = !empty($extraOptionsTpl) ? \',\' . $modx->getChunk($extraOptionsTpl,$scriptProperties) : \'\';\\n\\nif ($modx->lexicon) {\\n    $modx->lexicon->load($packageName . \':default\');\\n}\\n\\nif (!empty($load_fullcalendar)) {\\n    $script = \\"\\n<script>\\nvar initialLoad = true;    \\nvar poppingState = false;\\n\\nwindow.onpopstate = function(event){\\n    if (event.state.start){\\n        if ( typeof migxcalController != \'undefined\' ){\\n            migxcalController.config.baseParams.original_request_uri = event.state.url; \\n        }\\n        poppingState = true; \\/\\/don\'t re-push state\\n        $(\'#calendar\').fullCalendar(\'gotoDate\', event.state.start);\\n        poppingState = true; \\/\\/don\'t re-push state\\n        $(\'#calendar\').fullCalendar(\'changeView\', event.state.viewMode);\\n\\n    }\\n\\n}\\n\\nif (window.history){\\n    var windowHistory = window.history;\\n    \\/\\/ symlink to method \'history.pushState\'\\n    var historyPushState = windowHistory.pushState;\\n    \\/\\/ if the browser supports HTML5-History-API\\n    var isSupportHistoryAPI = !!historyPushState; \\n}\\n\\nvar migxcal_history = function(view,element,url){\\n\\n    \\/\\/ Prevent the code from running if there is no window.history object\\n    if (!window.history) return;\\n    var date_param = \'?date=\' + view.intervalStart.format(\'YYYY-MM-DD\');\\n    var view_param = \'&view=\' + view.name;\\n    \\n    url = isSupportHistoryAPI ? url : \'\';\\n    url = url + date_param + view_param;\\n\\n        \\n    if (initialLoad) { \\/\\/Replace the current state to set up state variables.  URL should be identical\\n        history.replaceState({ viewMode:view.name, start:view.intervalStart, url:url }, \'Edit Calendar\', url);\\n        if ( typeof migxcalController != \'undefined\' ){\\n            migxcalController.config.baseParams.original_request_uri = url; \\n        }\\n        initialLoad = false;\\n    }else{\\n        if (!poppingState) { \\n            history.pushState({ viewMode:view.name, start:view.intervalStart, url:url }, \'Edit Calendar\', url); \\n            if (typeof migxcalController != \'undefined\'){\\n                migxcalController.config.baseParams.original_request_uri = url; \\n            }\\n        }else{\\n            poppingState = false;\\n    }\\n}\\n\\n};\\n\\n\\t$(document).ready(function() {\\n\\t    var migxcal_categories = {};\\n        \\n\\t\\t$(\'#calendar\').fullCalendar({\\n\\t\\t\\theader: {\\n\\t\\t\\t\\tleft: \'prev,next today\',\\n\\t\\t\\t\\tcenter: \'title\',\\n\\t\\t\\t\\tright: \'month,agendaWeek,agendaDay\'\\n\\t\\t\\t},\\n\\t\\t\\t{$defaultDate}\\n\\t\\t\\tlang: \'{$lang}\',\\n            editable: {$editable},\\n            aspectRatio: {$aspectRatio},\\n            minTime: \'{$minTime}\',\\n            defaultView:\'{$view}\',\\n\\t\\t\\tevents: {\\n\\t\\t\\t\\turl: \'{$ajax_url}\',\\n                data: function() {\\n                    return {categories:migxcal_categories};\\n                },                \\n\\t\\t\\t\\terror: function() {\\n\\t\\t\\t\\t\\t$(\'#script-warning\').show();\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tloading: function(bool) {\\n\\t\\t\\t\\t$(\'#loading\').toggle(bool);\\n\\t\\t\\t}\\n            {$extraOptions}\\n            \\n\\t\\t});\\n        $(\'.migxcal_category\').click(function(){\\n            var el = $(this);\\n            var id = el.data().id;\\n            el.toggleClass(\'selected\');\\n            if (el.hasClass(\'selected\')){\\n                migxcal_categories[\'c_\' + id] = id; \\n            }\\n            else{\\n                migxcal_categories[\'c_\' + id] = 0; \\n            }\\n            $(\'#calendar\').fullCalendar( \'refetchEvents\' );\\n        });\\n\\t\\t\\n\\t});\\n\\n<\\/script>\\n\\";\\n\\n\\n    $modx->regClientCSS(\'assets\\/components\\/migxcalendars\\/js\\/fullcalendar\\/fullcalendar.css\');\\n    $modx->regClientStartupHTMLBlock(\'<link type=\\"text\\/css\\" href=\\"assets\\/components\\/migxcalendars\\/js\\/fullcalendar\\/fullcalendar.print.css\\" rel=\\"stylesheet\\" media=\\"print\\">\');\\n}\\n\\nif (!empty($load_jquery)) {\\n    $modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/lib\\/jquery.min.js\');\\n}\\nif (!empty($load_jquery)) {\\n    $modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/lib\\/jquery-ui.custom.min.js\');\\n}\\n\\nif (!empty($load_bootstrap)) {\\n    $modx->regClientScript(\'assets\\/components\\/migxangular\\/bootstrap-3.0.0\\/js\\/bootstrap.min.js\');\\n    $modx->regClientCSS(\'assets\\/components\\/migxangular\\/bootstrap-3.0.0\\/css\\/bootstrap.custom.css\');\\n}\\n$modx->regClientCSS(\'assets\\/components\\/migxcalendars\\/css\\/style.css\');\\n\\nif (!empty($load_fullcalendar)) {\\n    $modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/lib\\/moment.min.js\');\\n    $modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/fullcalendar\\/fullcalendar.min.js\');\\n    $modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/fullcalendar\\/lang\\/\' . $lang . \'.js\');\\n    $modx->regClientHTMLBlock($script);\\n}\\n$modx->regClientScript(\'assets\\/components\\/migxcalendars\\/js\\/history\\/history.min.js\');"}',
        'guid' => '07d210ddacd90eac6b7afb79602a2765',
        'native_key' => 2,
        'signature' => '8cf9b8c39fa3dec83a45e44a76ae4f7c',
      ),
      '70af385018c26d03bd03b24ac4d5a224' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"migxcalDetailView","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$dateVarKey = $modx->getOption(\'dateVarKey\', $scriptProperties, \'date_id\');\\n$date_id = (int) $modx->getOption($dateVarKey, $_REQUEST, 0);\\n\\n$output = \'\';\\nif (!empty($date_id)) {\\n\\n    $wheres = array();\\n    $wheres[] = array(\'id\'=>$date_id);\\n    $wheres[] = array(\'Event.deleted\' => 0, \'Event.published\' => 1);\\n\\n    $scriptProperties[\'packageName\'] = \'migxcalendars\';\\n    $scriptProperties[\'classname\'] = \'migxCalendarDates\';\\n    $scriptProperties[\'joins\'] = \'[{\\"alias\\":\\"Event\\"},{\\"alias\\":\\"Category\\",\\"classname\\":\\"migxCalendarCategories\\",\\"on\\":\\"Category.id=Event.categoryid\\"}]\';\\n    $scriptProperties[\'where\'] = $modx->toJson($wheres);\\n\\n    $output = $modx->runSnippet(\'migxLoopCollection\', $scriptProperties);\\n}\\n\\n$properties[\'load_fullcalendar\'] = \'0\';\\n$modx->runSnippet(\'migxcalCalendar\', $properties);\\n\\nreturn $output;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"$dateVarKey = $modx->getOption(\'dateVarKey\', $scriptProperties, \'date_id\');\\n$date_id = (int) $modx->getOption($dateVarKey, $_REQUEST, 0);\\n\\n$output = \'\';\\nif (!empty($date_id)) {\\n\\n    $wheres = array();\\n    $wheres[] = array(\'id\'=>$date_id);\\n    $wheres[] = array(\'Event.deleted\' => 0, \'Event.published\' => 1);\\n\\n    $scriptProperties[\'packageName\'] = \'migxcalendars\';\\n    $scriptProperties[\'classname\'] = \'migxCalendarDates\';\\n    $scriptProperties[\'joins\'] = \'[{\\"alias\\":\\"Event\\"},{\\"alias\\":\\"Category\\",\\"classname\\":\\"migxCalendarCategories\\",\\"on\\":\\"Category.id=Event.categoryid\\"}]\';\\n    $scriptProperties[\'where\'] = $modx->toJson($wheres);\\n\\n    $output = $modx->runSnippet(\'migxLoopCollection\', $scriptProperties);\\n}\\n\\n$properties[\'load_fullcalendar\'] = \'0\';\\n$modx->runSnippet(\'migxcalCalendar\', $properties);\\n\\nreturn $output;"}',
        'guid' => '28ecdf98e8ae98cb0e5636a9cbe8974b',
        'native_key' => 3,
        'signature' => 'ffa8996267cc1817dc22fc92880da448',
      ),
      '7c01964a838dd7ee62f6c0ba550c3ffe' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":4,"source":0,"property_preprocess":0,"name":"date_mod","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * phx-modifier: date_mod.phx.php\\n * Description: Modifier for timestamp\\n * @author\\n * Bruno Perner\\n * @return timestamp\\n *\\/\\n\\nif (!class_exists(\'date_mod\')) {\\n\\n    class date_mod {\\n\\n        function day($timestamp, $useadodbtime, $dateoptions) {\\n            $timeshift = 0;\\n            $shiftoption = \'\';\\n            if (strlen($dateoptions[1]) > 0) {\\n                $shiftarr = explode(\'_\', $dateoptions[1]);\\n                $timeshift = $shiftarr[0];\\n                $shiftoption = $shiftarr[1];\\n            }\\n            $adddays = ($shiftoption == \'day\') ? $timeshift : 0;\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $day = $day + $adddays;\\n            $month = ($useadodbtime == \'1\') ? xetadodb_date(\\"m\\", $timestamp) : date(\\"m\\", $timestamp);\\n            $year = ($useadodbtime == \'1\') ? xetadodb_date(\\"Y\\", $timestamp) : date(\\"Y\\", $timestamp);\\n            $timestamp = ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day, $year) : mktime(0, 0, 0, $month, $day, $year);\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n        }\\n        function month($timestamp, $useadodbtime, $dateoptions) {\\n            $timeshift = 0;\\n            $shiftoption = \'\';\\n            if (isset($dateoptions[1])) {\\n                $shiftarr = explode(\'_\', $dateoptions[1]);\\n                $timeshift = $shiftarr[0];\\n                $shiftoption = $shiftarr[1];\\n            }\\n            $adddays = ($shiftoption == \'day\') ? $timeshift : 0;\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $day = ($shiftoption == \'day\') ? $day + $adddays : \'01\';\\n            $addmonths = ($shiftoption == \'month\') ? $timeshift : 0;\\n            $month = ($useadodbtime == \'1\') ? xetadodb_date(\\"m\\", $timestamp) : date(\\"m\\", $timestamp);\\n            $month = $month + $addmonths;\\n            $year = ($useadodbtime == \'1\') ? xetadodb_date(\\"Y\\", $timestamp) : date(\\"Y\\", $timestamp);\\n            $timestamp = ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day, $year) : mktime(0, 0, 0, $month, 01, $year);\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"m\\", $timestamp) : date(\\"m\\", $timestamp);\\n        }\\n        function year($timestamp, $useadodbtime, $dateoptions) {\\n\\n            $timeshift = 0;\\n            $shiftoption = \'\';\\n            if (isset($dateoptions[1])) {\\n                $shiftarr = explode(\'_\', $dateoptions[1]);\\n                $timeshift = $shiftarr[0];\\n                $shiftoption = $shiftarr[1];\\n            }\\n            $adddays = ($shiftoption == \'day\') ? $timeshift : 0;\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $day = ($shiftoption == \'day\') ? $day + $adddays : \'01\';\\n            $addmonths = ($shiftoption == \'month\') ? $timeshift : 0;\\n            $month = ($useadodbtime == \'1\') ? xetadodb_date(\\"m\\", $timestamp) : date(\\"m\\", $timestamp);\\n            $month = $month + $addmonths;\\n            $addyears = ($shiftoption == \'year\') ? $timeshift : 0;\\n            $year = ($useadodbtime == \'1\') ? xetadodb_date(\\"Y\\", $timestamp) : date(\\"Y\\", $timestamp);\\n            $year = $year + $addyears;\\n            $timestamp = ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day, $year) : mktime(0, 0, 0, $month, 01, $year);\\n\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"Y\\", $timestamp) : date(\\"Y\\", $timestamp);\\n        }\\n        function hour($timestamp, $useadodbtime) {\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"H\\", $timestamp) : date(\\"H\\", $timestamp);\\n        }\\n        function minute($timestamp, $useadodbtime) {\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"i\\", $timestamp) : date(\\"i\\", $timestamp);\\n        }\\n        function second($timestamp, $useadodbtime) {\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"s\\", $timestamp) : date(\\"s\\", $timestamp);\\n        }\\n        function dow($timestamp, $useadodbtime) {\\n            return ($useadodbtime == \'1\') ? (($w = xetadodb_date(\\"w\\", $timestamp)) ? $w : 7) : (($w = xetadodb_date(\\"w\\", $timestamp)) ? $w : 7);\\n        }\\n\\n        function getISOkw($timestamp, $useadodbtime, $dateoptions) {\\n\\n            $timeshift = 0;\\n            $shiftoption = \'\';\\n            if (strlen($dateoptions[1]) > 0) {\\n                $shiftarr = explode(\'_\', $dateoptions[1]);\\n                $timeshift = $shiftarr[0];\\n                $shiftoption = $shiftarr[1];\\n            }\\n            $adddays = ($shiftoption == \'day\') ? $timeshift : 0;\\n            $timestamp = $timestamp + $adddays * 86400;\\n            $tsweekThu = $this->timestampweekstart($timestamp, $useadodbtime) + 3 * 86400; \\/\\/Donnerstag=Montag+3 Tage\\n            $kwyear = ($useadodbtime == \'1\') ? xetadodb_date(\\"Y\\", $tsweekThu) : date(\\"Y\\", $tsweekThu);\\n            $ts4Jan = xetadodb_mktime(0, 0, 0, 01, 04, $kwyear);\\n            $ts4Jan = ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, 01, 04, $kwyear) : mktime(0, 0, 0, 01, 04, $kwyear);\\n            $tsfirstDo = $this->timestampweekstart($ts4Jan, $useadodbtime) + 3 * 86400;\\n            $isokw = ceil(($tsweekThu - $tsfirstDo) \\/ 86400 \\/ 7 + 1);\\n            return ($dateoptions[0] == \'ISOcw_year\') ? $kwyear : $isokw;\\n        }\\n\\n        function timestampweekstart($timestamp, $useadodbtime) {\\n            $dow = $this->dow($timestamp, $useadodbtime);\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $month = $this->month($timestamp, $useadodbtime, $dateoptions);\\n            $year = $this->year($timestamp, $useadodbtime, $dateoptions);\\n            return ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day - $dow + 1, $year) : mktime(0, 0, 0, $month, $day - $dow + 1, $year);\\n        }\\n\\n        function timestampweekend($timestamp, $useadodbtime) {\\n            $dow = $this->dow($timestamp, $useadodbtime);\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $month = $this->month($timestamp, $useadodbtime, $dateoptions);\\n            $year = $this->year($timestamp, $useadodbtime, $dateoptions);\\n            return ($useadodbtime == \'1\') ? xetadodb_mktime(23, 59, 59, $month, $day + 7 - $dow, $year) : mktime(23, 59, 59, $month, $day + 7 - $dow, $year);\\n        }\\n\\n        function tsday($timestamp, $useadodbtime, $dateoptions) {\\n            $timeshift = (isset($dateoptions[1])) ? $dateoptions[1] : \'-0\';\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $day = $day + $timeshift;\\n            $month = $this->month($timestamp, $useadodbtime, $dateoptions);\\n            $year = $this->year($timestamp, $useadodbtime, $dateoptions);\\n            if (substr($timeshift, 0, 1) == \'-\')\\n                return ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day, $year) : mktime(0, 0, 0, $month, $day, $year);\\n            else\\n                return ($useadodbtime == \'1\') ? xetadodb_mktime(23, 59, 59, $month, $day, $year) : mktime(23, 59, 59, $month, $day, $year);\\n        }\\n\\n        function tsmonth($timestamp, $useadodbtime, $dateoptions) {\\n            $timeshift = (isset($dateoptions[1])) ? $dateoptions[1] : \'-0\';\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $month = $this->month($timestamp, $useadodbtime, $dateoptions) + $timeshift;\\n            $year = $this->year($timestamp, $useadodbtime, $dateoptions);\\n            if (substr($timeshift, 0, 1) == \'-\')\\n                return ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day, $year) : mktime(0, 0, 0, $month, $day, $year);\\n            else\\n                return ($useadodbtime == \'1\') ? xetadodb_mktime(23, 59, 59, $month, $day, $year) : mktime(23, 59, 59, $month, $day, $year);\\n        }\\n\\n        function monthname($timestamp, $useadodbtime, $dateoptions, $monthnames) {\\n            $monthnames = (isset($dateoptions[2])) ? explode(\',\', $dateoptions[2]) : $monthnames;\\n            $month = abs($this->month($timestamp, $useadodbtime, $dateoptions));\\n            return (isset($dateoptions[3])) ? substr($monthnames[$month], 0, $dateoptions[3]) : $monthnames[$month];\\n        }\\n        function dayname($timestamp, $useadodbtime, $dateoptions, $daynames) {\\n            $daynames = (isset($dateoptions[2])) ? explode(\',\', $dateoptions[2]) : $daynames;\\n            $dow = abs($this->dow($timestamp, $useadodbtime));\\n            return (isset($dateoptions[3])) ? substr($daynames[$dow], 0, $dateoptions[3]) : $daynames[$dow];\\n        }\\n    }\\n\\n}\\n\\n\\n$daynames = array();\\n\\/*\\n$loc_de = setlocale(LC_ALL, \'de_DE@euro\', \'de_DE\', \'deu_deu\', \'de\', \'ge\');\\necho \\"Preferred locale for german on this system is \'$loc_de\'\\";\\n*\\/\\nsetlocale(LC_TIME, \'de_DE@euro\');\\nfor ($i = 1; $i <= 7; $i++) {\\n    $timestamp = mktime(0, 0, 0, 05, $i, 2000);\\n    $daynames[$i] = strftime(\\"%A\\", $timestamp);\\n}\\n\\/*\\n$monthnames=array();\\nfor ($i=1;$i<=12;$i++){\\n$timestamp=mktime(0, 0, 0, $i, 01, 2000);\\n$monthnames[$i]=strftime(\\"%B\\",$timestamp);\\n}\\n*\\/\\n$str_monthnames = \',Januar,Februar,M\\u00e4rz,April,Mai,Juni,Juli,August,September,Oktober,November,Dezember\';\\n$str_daynames = \',Montag,Dienstag,Mittwoch,Donnerstag,Freitag,Samstag,Sonntag\';\\n\\n$monthnames = isset($GLOBALS[\'monthnames\']) ? $GLOBALS[\'monthnames\'] : explode(\',\', $str_monthnames);\\n$daynames = isset($GLOBALS[\'daynames\']) ? $GLOBALS[\'daynames\'] : explode(\',\', $str_daynames);\\n$options = explode(\'||\', $options);\\n\\/\\/path where adodb-time.inc.php is installed.\\n$dateoptions = (isset($options[0])) ? $options[0] : \'\';\\nif ($dateoptions == \'\') {\\n    return $input;\\n}\\n$dateoptions = explode(\':\', $dateoptions);\\n$adodbpath = (isset($options[1])) ? $options[1] : \\"assets\\/snippets\\/blox\\/inc\\/\\";\\n$adodbFile = $modx->config[\'base_path\'] . $adodbpath . \'adodb-time.inc.php\';\\n$useadodbtime = \'0\';\\nif (file_exists($adodbFile)) {\\n    include_once ($adodbFile);\\n    $useadodbtime = \'1\';\\n}\\n\\/\\/get timestamp from placeholder\\n$date = (strlen($input) > 0) ? $input : time();\\n$dateday = strftime(\\"%d\\", $date);\\n$datemonth = strftime(\\"%m\\", $date);\\n$dateyear = strftime(\\"%Y\\", $date);\\n\\/\\/$dateday = $dateday + $timeshift;\\n\\n$datemod = new date_mod();\\n\\nswitch ($dateoptions[0]) {\\n    case \'day\':\\n        return $datemod->day($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'month\':\\n        return $datemod->month($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'year\':\\n        return $datemod->year($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'hour\':\\n        return $datemod->hour($input, $useadodbtime);\\n        break;\\n    case \'minute\':\\n        return $datemod->minute($input, $useadodbtime);\\n        break;\\n    case \'second\':\\n        return $datemod->second($input, $useadodbtime);\\n        break;\\n    case \'ISOcalweek\':\\n        return $datemod->getISOkw($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'ISOcw_year\':\\n        return $datemod->getISOkw($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'dow\':\\n        return $datemod->dow($input, $useadodbtime);\\n        break;\\n    case \'monthname\':\\n        return $datemod->monthname($input, $useadodbtime, $dateoptions, $monthnames);\\n        break;\\n    case \'dayname\':\\n        return $datemod->dayname($input, $useadodbtime, $dateoptions, $daynames);\\n        break;\\n    case \'tsday\':\\n        return $datemod->tsday($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'tsmonth\':\\n        return $datemod->tsmonth($input, $useadodbtime, $dateoptions);\\n        break;\\n\\n}\\nreturn $input;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * phx-modifier: date_mod.phx.php\\n * Description: Modifier for timestamp\\n * @author\\n * Bruno Perner\\n * @return timestamp\\n *\\/\\n\\nif (!class_exists(\'date_mod\')) {\\n\\n    class date_mod {\\n\\n        function day($timestamp, $useadodbtime, $dateoptions) {\\n            $timeshift = 0;\\n            $shiftoption = \'\';\\n            if (strlen($dateoptions[1]) > 0) {\\n                $shiftarr = explode(\'_\', $dateoptions[1]);\\n                $timeshift = $shiftarr[0];\\n                $shiftoption = $shiftarr[1];\\n            }\\n            $adddays = ($shiftoption == \'day\') ? $timeshift : 0;\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $day = $day + $adddays;\\n            $month = ($useadodbtime == \'1\') ? xetadodb_date(\\"m\\", $timestamp) : date(\\"m\\", $timestamp);\\n            $year = ($useadodbtime == \'1\') ? xetadodb_date(\\"Y\\", $timestamp) : date(\\"Y\\", $timestamp);\\n            $timestamp = ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day, $year) : mktime(0, 0, 0, $month, $day, $year);\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n        }\\n        function month($timestamp, $useadodbtime, $dateoptions) {\\n            $timeshift = 0;\\n            $shiftoption = \'\';\\n            if (isset($dateoptions[1])) {\\n                $shiftarr = explode(\'_\', $dateoptions[1]);\\n                $timeshift = $shiftarr[0];\\n                $shiftoption = $shiftarr[1];\\n            }\\n            $adddays = ($shiftoption == \'day\') ? $timeshift : 0;\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $day = ($shiftoption == \'day\') ? $day + $adddays : \'01\';\\n            $addmonths = ($shiftoption == \'month\') ? $timeshift : 0;\\n            $month = ($useadodbtime == \'1\') ? xetadodb_date(\\"m\\", $timestamp) : date(\\"m\\", $timestamp);\\n            $month = $month + $addmonths;\\n            $year = ($useadodbtime == \'1\') ? xetadodb_date(\\"Y\\", $timestamp) : date(\\"Y\\", $timestamp);\\n            $timestamp = ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day, $year) : mktime(0, 0, 0, $month, 01, $year);\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"m\\", $timestamp) : date(\\"m\\", $timestamp);\\n        }\\n        function year($timestamp, $useadodbtime, $dateoptions) {\\n\\n            $timeshift = 0;\\n            $shiftoption = \'\';\\n            if (isset($dateoptions[1])) {\\n                $shiftarr = explode(\'_\', $dateoptions[1]);\\n                $timeshift = $shiftarr[0];\\n                $shiftoption = $shiftarr[1];\\n            }\\n            $adddays = ($shiftoption == \'day\') ? $timeshift : 0;\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $day = ($shiftoption == \'day\') ? $day + $adddays : \'01\';\\n            $addmonths = ($shiftoption == \'month\') ? $timeshift : 0;\\n            $month = ($useadodbtime == \'1\') ? xetadodb_date(\\"m\\", $timestamp) : date(\\"m\\", $timestamp);\\n            $month = $month + $addmonths;\\n            $addyears = ($shiftoption == \'year\') ? $timeshift : 0;\\n            $year = ($useadodbtime == \'1\') ? xetadodb_date(\\"Y\\", $timestamp) : date(\\"Y\\", $timestamp);\\n            $year = $year + $addyears;\\n            $timestamp = ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day, $year) : mktime(0, 0, 0, $month, 01, $year);\\n\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"Y\\", $timestamp) : date(\\"Y\\", $timestamp);\\n        }\\n        function hour($timestamp, $useadodbtime) {\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"H\\", $timestamp) : date(\\"H\\", $timestamp);\\n        }\\n        function minute($timestamp, $useadodbtime) {\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"i\\", $timestamp) : date(\\"i\\", $timestamp);\\n        }\\n        function second($timestamp, $useadodbtime) {\\n            return ($useadodbtime == \'1\') ? xetadodb_date(\\"s\\", $timestamp) : date(\\"s\\", $timestamp);\\n        }\\n        function dow($timestamp, $useadodbtime) {\\n            return ($useadodbtime == \'1\') ? (($w = xetadodb_date(\\"w\\", $timestamp)) ? $w : 7) : (($w = xetadodb_date(\\"w\\", $timestamp)) ? $w : 7);\\n        }\\n\\n        function getISOkw($timestamp, $useadodbtime, $dateoptions) {\\n\\n            $timeshift = 0;\\n            $shiftoption = \'\';\\n            if (strlen($dateoptions[1]) > 0) {\\n                $shiftarr = explode(\'_\', $dateoptions[1]);\\n                $timeshift = $shiftarr[0];\\n                $shiftoption = $shiftarr[1];\\n            }\\n            $adddays = ($shiftoption == \'day\') ? $timeshift : 0;\\n            $timestamp = $timestamp + $adddays * 86400;\\n            $tsweekThu = $this->timestampweekstart($timestamp, $useadodbtime) + 3 * 86400; \\/\\/Donnerstag=Montag+3 Tage\\n            $kwyear = ($useadodbtime == \'1\') ? xetadodb_date(\\"Y\\", $tsweekThu) : date(\\"Y\\", $tsweekThu);\\n            $ts4Jan = xetadodb_mktime(0, 0, 0, 01, 04, $kwyear);\\n            $ts4Jan = ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, 01, 04, $kwyear) : mktime(0, 0, 0, 01, 04, $kwyear);\\n            $tsfirstDo = $this->timestampweekstart($ts4Jan, $useadodbtime) + 3 * 86400;\\n            $isokw = ceil(($tsweekThu - $tsfirstDo) \\/ 86400 \\/ 7 + 1);\\n            return ($dateoptions[0] == \'ISOcw_year\') ? $kwyear : $isokw;\\n        }\\n\\n        function timestampweekstart($timestamp, $useadodbtime) {\\n            $dow = $this->dow($timestamp, $useadodbtime);\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $month = $this->month($timestamp, $useadodbtime, $dateoptions);\\n            $year = $this->year($timestamp, $useadodbtime, $dateoptions);\\n            return ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day - $dow + 1, $year) : mktime(0, 0, 0, $month, $day - $dow + 1, $year);\\n        }\\n\\n        function timestampweekend($timestamp, $useadodbtime) {\\n            $dow = $this->dow($timestamp, $useadodbtime);\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $month = $this->month($timestamp, $useadodbtime, $dateoptions);\\n            $year = $this->year($timestamp, $useadodbtime, $dateoptions);\\n            return ($useadodbtime == \'1\') ? xetadodb_mktime(23, 59, 59, $month, $day + 7 - $dow, $year) : mktime(23, 59, 59, $month, $day + 7 - $dow, $year);\\n        }\\n\\n        function tsday($timestamp, $useadodbtime, $dateoptions) {\\n            $timeshift = (isset($dateoptions[1])) ? $dateoptions[1] : \'-0\';\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $day = $day + $timeshift;\\n            $month = $this->month($timestamp, $useadodbtime, $dateoptions);\\n            $year = $this->year($timestamp, $useadodbtime, $dateoptions);\\n            if (substr($timeshift, 0, 1) == \'-\')\\n                return ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day, $year) : mktime(0, 0, 0, $month, $day, $year);\\n            else\\n                return ($useadodbtime == \'1\') ? xetadodb_mktime(23, 59, 59, $month, $day, $year) : mktime(23, 59, 59, $month, $day, $year);\\n        }\\n\\n        function tsmonth($timestamp, $useadodbtime, $dateoptions) {\\n            $timeshift = (isset($dateoptions[1])) ? $dateoptions[1] : \'-0\';\\n            $day = ($useadodbtime == \'1\') ? xetadodb_date(\\"d\\", $timestamp) : date(\\"d\\", $timestamp);\\n            $month = $this->month($timestamp, $useadodbtime, $dateoptions) + $timeshift;\\n            $year = $this->year($timestamp, $useadodbtime, $dateoptions);\\n            if (substr($timeshift, 0, 1) == \'-\')\\n                return ($useadodbtime == \'1\') ? xetadodb_mktime(0, 0, 0, $month, $day, $year) : mktime(0, 0, 0, $month, $day, $year);\\n            else\\n                return ($useadodbtime == \'1\') ? xetadodb_mktime(23, 59, 59, $month, $day, $year) : mktime(23, 59, 59, $month, $day, $year);\\n        }\\n\\n        function monthname($timestamp, $useadodbtime, $dateoptions, $monthnames) {\\n            $monthnames = (isset($dateoptions[2])) ? explode(\',\', $dateoptions[2]) : $monthnames;\\n            $month = abs($this->month($timestamp, $useadodbtime, $dateoptions));\\n            return (isset($dateoptions[3])) ? substr($monthnames[$month], 0, $dateoptions[3]) : $monthnames[$month];\\n        }\\n        function dayname($timestamp, $useadodbtime, $dateoptions, $daynames) {\\n            $daynames = (isset($dateoptions[2])) ? explode(\',\', $dateoptions[2]) : $daynames;\\n            $dow = abs($this->dow($timestamp, $useadodbtime));\\n            return (isset($dateoptions[3])) ? substr($daynames[$dow], 0, $dateoptions[3]) : $daynames[$dow];\\n        }\\n    }\\n\\n}\\n\\n\\n$daynames = array();\\n\\/*\\n$loc_de = setlocale(LC_ALL, \'de_DE@euro\', \'de_DE\', \'deu_deu\', \'de\', \'ge\');\\necho \\"Preferred locale for german on this system is \'$loc_de\'\\";\\n*\\/\\nsetlocale(LC_TIME, \'de_DE@euro\');\\nfor ($i = 1; $i <= 7; $i++) {\\n    $timestamp = mktime(0, 0, 0, 05, $i, 2000);\\n    $daynames[$i] = strftime(\\"%A\\", $timestamp);\\n}\\n\\/*\\n$monthnames=array();\\nfor ($i=1;$i<=12;$i++){\\n$timestamp=mktime(0, 0, 0, $i, 01, 2000);\\n$monthnames[$i]=strftime(\\"%B\\",$timestamp);\\n}\\n*\\/\\n$str_monthnames = \',Januar,Februar,M\\u00e4rz,April,Mai,Juni,Juli,August,September,Oktober,November,Dezember\';\\n$str_daynames = \',Montag,Dienstag,Mittwoch,Donnerstag,Freitag,Samstag,Sonntag\';\\n\\n$monthnames = isset($GLOBALS[\'monthnames\']) ? $GLOBALS[\'monthnames\'] : explode(\',\', $str_monthnames);\\n$daynames = isset($GLOBALS[\'daynames\']) ? $GLOBALS[\'daynames\'] : explode(\',\', $str_daynames);\\n$options = explode(\'||\', $options);\\n\\/\\/path where adodb-time.inc.php is installed.\\n$dateoptions = (isset($options[0])) ? $options[0] : \'\';\\nif ($dateoptions == \'\') {\\n    return $input;\\n}\\n$dateoptions = explode(\':\', $dateoptions);\\n$adodbpath = (isset($options[1])) ? $options[1] : \\"assets\\/snippets\\/blox\\/inc\\/\\";\\n$adodbFile = $modx->config[\'base_path\'] . $adodbpath . \'adodb-time.inc.php\';\\n$useadodbtime = \'0\';\\nif (file_exists($adodbFile)) {\\n    include_once ($adodbFile);\\n    $useadodbtime = \'1\';\\n}\\n\\/\\/get timestamp from placeholder\\n$date = (strlen($input) > 0) ? $input : time();\\n$dateday = strftime(\\"%d\\", $date);\\n$datemonth = strftime(\\"%m\\", $date);\\n$dateyear = strftime(\\"%Y\\", $date);\\n\\/\\/$dateday = $dateday + $timeshift;\\n\\n$datemod = new date_mod();\\n\\nswitch ($dateoptions[0]) {\\n    case \'day\':\\n        return $datemod->day($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'month\':\\n        return $datemod->month($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'year\':\\n        return $datemod->year($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'hour\':\\n        return $datemod->hour($input, $useadodbtime);\\n        break;\\n    case \'minute\':\\n        return $datemod->minute($input, $useadodbtime);\\n        break;\\n    case \'second\':\\n        return $datemod->second($input, $useadodbtime);\\n        break;\\n    case \'ISOcalweek\':\\n        return $datemod->getISOkw($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'ISOcw_year\':\\n        return $datemod->getISOkw($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'dow\':\\n        return $datemod->dow($input, $useadodbtime);\\n        break;\\n    case \'monthname\':\\n        return $datemod->monthname($input, $useadodbtime, $dateoptions, $monthnames);\\n        break;\\n    case \'dayname\':\\n        return $datemod->dayname($input, $useadodbtime, $dateoptions, $daynames);\\n        break;\\n    case \'tsday\':\\n        return $datemod->tsday($input, $useadodbtime, $dateoptions);\\n        break;\\n    case \'tsmonth\':\\n        return $datemod->tsmonth($input, $useadodbtime, $dateoptions);\\n        break;\\n\\n}\\nreturn $input;"}',
        'guid' => 'e7e40fe9c75c7c10ec7d5a1e099b4178',
        'native_key' => 4,
        'signature' => 'eaa250bc9b00b4fead6253d0a4ab9cdd',
      ),
    ),
    'Templates' => 
    array (
      'f195e9a0a8bfa8abe033dab7a53d608e' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'templatename',
        'class' => 'modTemplate',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"templatename":"migxcal_baseTemplate","description":"","editor_type":0,"category":0,"icon":"","template_type":0,"content":"<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\'utf-8\' \\/>\\n<base href=\\"[[++site_url]]\\" \\/>\\n\\n<\\/head>\\n\\n<body>\\n\\n[[!migxcalCalendar?\\n&ajax_id=`5`\\n&extraOptionsTpl=`migxcalExtraOptions`\\n&lang=`en-gb`\\n]]\\n\\n<div id=\\"event-detail\\" class=\\"modal fade\\">\\n  <div class=\\"modal-dialog\\">\\n    <div class=\\"modal-content\\">\\n      <div class=\\"modal-header\\">\\n        <button type=\\"button\\" class=\\"close\\" data-dismiss=\\"modal\\" aria-hidden=\\"true\\">&times;<\\/button>\\n        <h4 id=\\"event-detail-title\\" class=\\"modal-title\\">Modal title<\\/h4>\\n      <\\/div>\\n      <div id=\\"event-detail-body\\" class=\\"modal-body\\">\\n\\n      <\\/div>\\n    <\\/div><!-- \\/.modal-content -->\\n  <\\/div><!-- \\/.modal-dialog -->\\n<\\/div><!-- \\/.modal -->\\n\\n\\n\\t<div id=\'script-warning\'>\\n\\t\\tyour ajax-resource seems not to work.\\n\\t<\\/div>\\n\\n\\t<div id=\'loading\'>loading...<\\/div>\\n\\n        <div id=\\"migxcal_container\\">\\n        <div id=\\"migxcal_categories\\">\\n        <ul>\\n        [[!migxLoopCollection? \\n          &packageName=`migxcalendars` \\n          &classname=`migxCalendarCategories`\\n          &tpl=`migxcal_categoryTpl`\\n        ]]\\n        <\\/ul>\\n        <\\/div>\\n\\t<div id=\'calendar\'><\\/div>\\n        <\\/div>\\n\\n<\\/body>\\n<\\/html>\\n","locked":0,"properties":null,"static":0,"static_file":""}',
        'guid' => 'a645c52c4af1e8c1be90830f6b9b4b52',
        'native_key' => 1,
        'signature' => 'd023c984a93067a577e6366a98a9ed81',
      ),
      'b8587a563407158272ef3e1d8813e090' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'templatename',
        'class' => 'modTemplate',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"templatename":"migxcal_editableTemplate","description":"","editor_type":0,"category":0,"icon":"","template_type":0,"content":"<!DOCTYPE html>\\n<html ng-app=\\"migxAngular\\" id=\\"ng-app\\">\\n<head>\\n<meta charset=\'utf-8\' \\/>\\n<base href=\\"[[++site_url]]\\" \\/>\\n\\n<\\/head>\\n<body>\\n\\n[[!migxcalCalendar?\\n&ajax_id=`175`\\n&editable=`1`\\n&load_jquery=`0`\\n&load_jqueryui=`0`\\n&extraOptionsTpl=`migxcalEditableOptions`\\n]]\\n\\n[[!Login? &tplType=`modChunk` &loginTpl=`lgnLoginSidebarChunk` &contexts=`web,mgr`]]\\n<div id=\\"migxcalCtrl\\"  ng-controller=\\"migxcalCtrl\\" >\\n[[!MIGXangular? \\n&buttons=`[\\n{\\"text\\":\\"[[!%migxcal.load_datecontainer]]\\",\\"configs\\":\\"migxcalendar_loadcontainer\\"}\\n]`\\n]] \\n\\n\\n\\n\\n\\t<div id=\'script-warning\'>\\n\\t\\tyour ajax-resource seems not to work.\\n\\t<\\/div>\\n\\n\\t<div id=\'loading\'>loading...<\\/div>\\n\\n        <div id=\\"migxcal_container\\">\\n        <div id=\\"migxcal_categories\\">\\n        <ul>\\n        [[!migxLoopCollection? \\n          &packageName=`migxcalendars` \\n          &classname=`migxCalendarCategories`\\n          &tpl=`migxcal_categoryTpl`\\n        ]]\\n        <\\/ul>\\n        <ul>\\n        <li class=\\"migxcal_category\\" data-id=\\"hide_published\\" >[[!%migxcal.hide_published]]<\\/li>\\n        <li class=\\"migxcal_category\\" data-id=\\"show_unpublished\\" >[[!%migxcal.show_unpublished]]<\\/li>        \\n        <\\/ul>\\n        \\n        <h4>[[!%migxcal.date_containers]]<\\/h4>\\n        <ul>\\n        <li class=\\"migxcal_category datecontainer\\" id=\\"datecontainer{{date_container.id}}\\" data-eventid=\\"{{date_container.id}}\\" data-catid=\\"{{date_container.categoryid}}\\"  ng-repeat=\\"date_container in date_containers\\">\\n        {{date_container.title}}({{date_container.id}}) \\n        <button type=\\"button\\" ng-click=\\"closecontainer(date_container)\\" class=\\"btn btn-default datecontainer-button btn-xs pull-right\\">    \\n            <span class=\\"glyphicon glyphicon-remove\\"><\\/span> \\n        <\\/button> \\n        <\\/li>\\n        <\\/ul>\\n\\n        <\\/div>\\n\\t<div id=\'calendar\'><\\/div>\\n        <\\/div>\\n<script type=\\"text\\/javascript\\">\\n[[!$migxcal_controller]]\\n<\\/script>\\n<\\/body>\\n<\\/html>\\n","locked":0,"properties":null,"static":0,"static_file":""}',
        'guid' => '3780872af0b3d363421ac5b7d10eb5f1',
        'native_key' => 2,
        'signature' => '997f89a7f7fd781002c3115fc3ebcd03',
      ),
      '81bf64afb28d49de7d8788fb289ac87e' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'templatename',
        'class' => 'modTemplate',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"templatename":"migxcal_dateDetailTemplate","description":"","editor_type":0,"category":0,"icon":"","template_type":0,"content":"<html>\\n<head>\\n<title>[[++site_name]] - [[*pagetitle]]<\\/title>\\n<base href=\\"[[++site_url]]\\" \\/>\\n<\\/head>\\n<body>\\n<div class=\\"container\\">\\n[[!migxcalDetailView? &tpl=`migxcal_detailTpl`]]\\n<\\/div>\\n<\\/body>\\n<\\/html>","locked":0,"properties":null,"static":0,"static_file":""}',
        'guid' => '9360f5fa47ff38d202e5fdfdbee0f27d',
        'native_key' => 3,
        'signature' => '930d0b1cda2768c2028ee0c50cf53658',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Templates' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'templatename',
    ),
  ),
  'namespace' => 'migxcalendars',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migxcalendars-0.9.4-beta3\\/modCategory\\/2b9fb64efdda560961b467463742393d\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"migxcalendars"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migxcalendars-0.9.4-beta3\\/modCategory\\/2b9fb64efdda560961b467463742393d\\/1\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"migxcalendars"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"migxcalendars-0.9.4-beta3\\/modCategory\\/2b9fb64efdda560961b467463742393d.plugin.resolver.resolver","type":"php","name":"plugin.resolver"}',
    ),
    3 => 
    array (
      'type' => 'php',
      'body' => '{"source":"migxcalendars-0.9.4-beta3\\/modCategory\\/2b9fb64efdda560961b467463742393d.tables.resolver.resolver","type":"php","name":"tables.resolver"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '69a5ae043581ded81b6c4a449ed48c21',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '2b9fb64efdda560961b467463742393d',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"migxCalendars"}',
);